name: Deploy Full Stack

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      backend_image_tag:
        description: 'Backend image tag (leave empty for latest)'
        required: false
        type: string
      frontend_image_tag:
        description: 'Frontend image tag (leave empty for latest)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/backend
  FRONTEND_IMAGE: ${{ github.repository }}/frontend

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_CONTENT" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Create namespaces
        run: |
          kubectl apply -f k8s/personal/namespaces.yaml

      - name: Deploy Ingress
        run: |
          kubectl apply -f k8s/personal/ingress.yaml

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_CONTENT" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Update backend image tag
        run: |
          IMAGE_TAG="${{ inputs.backend_image_tag }}"
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="latest"
          fi
          sed -i "s|image:.*backend.*|image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${IMAGE_TAG}|g" k8s/personal/backend-deployment.yaml

      - name: Deploy backend
        run: |
          kubectl apply -f k8s/personal/backend-deployment.yaml

      - name: Wait for backend rollout
        run: |
          kubectl rollout status deployment/backend-api -n backend --timeout=5m

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-backend]
    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_CONTENT" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Update frontend image tag
        run: |
          IMAGE_TAG="${{ inputs.frontend_image_tag }}"
          if [ -z "$IMAGE_TAG" ]; then
            IMAGE_TAG="latest"
          fi
          sed -i "s|image:.*frontend.*|image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${IMAGE_TAG}|g" k8s/personal/frontend-deployment.yaml

      - name: Deploy frontend
        run: |
          kubectl apply -f k8s/personal/frontend-deployment.yaml

      - name: Wait for frontend rollout
        run: |
          kubectl rollout status deployment/frontend-app -n frontend --timeout=5m

  verify-deployment:
    name: Verify Full Stack
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBECONFIG_CONTENT" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Check all deployments
        run: |
          echo "=== Backend Pods ==="
          kubectl get pods -n backend
          echo ""
          echo "=== Frontend Pods ==="
          kubectl get pods -n frontend
          echo ""
          echo "=== Services ==="
          kubectl get svc -n backend
          kubectl get svc -n frontend
          echo ""
          echo "=== Ingress ==="
          kubectl get ingress --all-namespaces

      - name: Run backend health check
        run: |
          BACKEND_IP=$(kubectl get service backend-api-service -n backend -o jsonpath='{.spec.clusterIP}')
          kubectl run health-check-backend --image=curlimages/curl --rm -it --restart=Never -- \
            curl -f http://${BACKEND_IP}:8080/api/v1/health || exit 1

      - name: Run frontend health check
        run: |
          FRONTEND_IP=$(kubectl get service frontend-app-service -n frontend -o jsonpath='{.spec.clusterIP}')
          kubectl run health-check-frontend --image=curlimages/curl --rm -it --restart=Never -- \
            curl -f http://${FRONTEND_IP}:80 || exit 1

      - name: Deployment summary
        run: |
          echo "âœ… Full stack deployment completed successfully!"
          echo ""
          echo "Backend: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ inputs.backend_image_tag || 'latest' }}"
          echo "Frontend: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ inputs.frontend_image_tag || 'latest' }}"
          echo ""
          echo "Environment: ${{ inputs.environment }}"

