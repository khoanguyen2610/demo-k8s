name: Build and Deploy with Helm

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  DOCKER_BACKEND_IMAGE: khoanguyen2610/backend
  DOCKER_FRONTEND_IMAGE: khoanguyen2610/frontend
  DOCKER_CONSUMER_IMAGE: khoanguyen2610/backend
  HELM_VERSION: v3.13.0

jobs:
  build-backend:
    name: Build Backend API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend API
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-consumer:
    name: Build Consumer Workers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_CONSUMER_IMAGE }}
          flavor: |
            suffix=-consumer,onlatest=true
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=consumer-latest,enable={{is_default_branch}}

      - name: Build and push Consumer
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: consumer
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: Build Frontend App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-k8s:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build-backend, build-consumer, build-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
      url: http://kn-tech.click
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify kubectl connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy Backend
        run: |
          echo "üöÄ Deploying backend..."
          kubectl apply -k k8s/backend/
          
          # Update image tags
          kubectl set image deployment/backend-api \
            backend-api=${{ env.DOCKER_BACKEND_IMAGE }}:${{ github.ref_name }}-${{ github.sha }} \
            -n backend
          
          kubectl set image deployment/email-processor-consumer \
            consumer=${{ env.DOCKER_CONSUMER_IMAGE }}:${{ github.ref_name }}-${{ github.sha }}-consumer \
            -n backend
          
          kubectl set image deployment/data-sync-consumer \
            consumer=${{ env.DOCKER_CONSUMER_IMAGE }}:${{ github.ref_name }}-${{ github.sha }}-consumer \
            -n backend
          
          kubectl set image deployment/report-generator-consumer \
            consumer=${{ env.DOCKER_CONSUMER_IMAGE }}:${{ github.ref_name }}-${{ github.sha }}-consumer \
            -n backend

      - name: Deploy Frontend
        run: |
          echo "üöÄ Deploying frontend..."
          kubectl apply -k k8s/frontend/
          
          # Update image tag
          kubectl set image deployment/frontend-app \
            frontend-app=${{ env.DOCKER_FRONTEND_IMAGE }}:${{ github.ref_name }}-${{ github.sha }} \
            -n frontend

      - name: Wait for deployments
        run: |
          echo "‚è≥ Waiting for deployments to be ready..."
          
          # Backend
          kubectl rollout status deployment/backend-api -n backend --timeout=300s
          
          # Frontend  
          kubectl rollout status deployment/frontend-app -n frontend --timeout=300s
          
          # Consumers
          kubectl rollout status deployment/email-processor-consumer -n backend --timeout=300s || true
          kubectl rollout status deployment/data-sync-consumer -n backend --timeout=300s || true
          kubectl rollout status deployment/report-generator-consumer -n backend --timeout=300s || true
          
          echo "‚úÖ All deployments ready!"

      - name: Verify deployment
        run: |
          echo "üìã Deployment Status:"
          echo "===================="
          echo ""
          echo "Backend Namespace:"
          kubectl get pods -n backend
          kubectl get svc -n backend
          echo ""
          echo "Frontend Namespace:"
          kubectl get pods -n frontend
          kubectl get svc -n frontend
          kubectl get ingress -n frontend

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-k8s
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Rollback deployments
        run: |
          echo "‚ö†Ô∏è  Deployment failed! Rolling back..."
          
          # Rollback backend
          kubectl rollout undo deployment/backend-api -n backend || true
          kubectl rollout undo deployment/email-processor-consumer -n backend || true
          kubectl rollout undo deployment/data-sync-consumer -n backend || true
          kubectl rollout undo deployment/report-generator-consumer -n backend || true
          
          # Rollback frontend
          kubectl rollout undo deployment/frontend-app -n frontend || true
          
          echo "‚úÖ Rollback completed"

      - name: Notify failure
        run: |
          echo "‚ùå Deployment failed and was rolled back"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
