name: Build and Deploy with Helm

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  DOCKER_BACKEND_IMAGE: khoanguyen2610/backend
  DOCKER_FRONTEND_IMAGE: khoanguyen2610/frontend
  DOCKER_CONSUMER_IMAGE: khoanguyen2610/backend
  HELM_VERSION: v3.13.0

jobs:
  build-backend:
    name: Build Backend API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend API
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-consumer:
    name: Build Consumer Workers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_CONSUMER_IMAGE }}
          flavor: |
            suffix=-consumer,onlatest=true
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=consumer-latest,enable={{is_default_branch}}

      - name: Build and push Consumer
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: consumer
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: Build Frontend App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-backend:
    name: Test Backend API
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull and test backend image
        run: |
          docker pull ${{ env.DOCKER_BACKEND_IMAGE }}:${{ github.ref_name }}-${{ github.sha }}
          docker run -d --name test-api -p 8080:8080 ${{ env.DOCKER_BACKEND_IMAGE }}:${{ github.ref_name }}-${{ github.sha }}
          sleep 5
          curl -f http://localhost:8080/api/v1/health || exit 1
          docker stop test-api
          echo "‚úÖ Backend health check passed"

  deploy-helm:
    name: Deploy to Kubernetes with Helm
    runs-on: ubuntu-latest
    needs: [build-backend, build-consumer, build-frontend, test-backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
      url: http://kn-tech.click
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Verify kubectl connection
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Lint Helm chart
        run: |
          helm lint k8s/helm/devops-app/

      - name: Deploy with Helm
        run: |
          helm upgrade --install devops-app k8s/helm/devops-app/ \
            --namespace default \
            --create-namespace \
            --set backend.image.tag=${{ github.ref_name }}-${{ github.sha }} \
            --set frontend.image.tag=${{ github.ref_name }}-${{ github.sha }} \
            --set consumers.image.tag=${{ github.ref_name }}-${{ github.sha }}-consumer \
            --timeout 5m \
            --wait

      - name: Verify deployment
        run: |
          echo "Checking deployment status..."
          kubectl get deployments -n default
          kubectl get pods -n default
          
          echo "Waiting for rollout to complete..."
          kubectl rollout status deployment/backend-api -n default --timeout=300s
          kubectl rollout status deployment/frontend-app -n default --timeout=300s
          
          echo "‚úÖ Deployment successful!"

      - name: Get service URLs
        run: |
          echo "üìã Deployment Information:"
          echo "=========================="
          kubectl get ingress -n default
          kubectl get services -n default

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-helm
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Rollback Helm release
        run: |
          echo "‚ö†Ô∏è  Deployment failed! Rolling back..."
          helm rollback devops-app -n default
          echo "‚úÖ Rollback completed"

      - name: Notify failure
        run: |
          echo "‚ùå Deployment failed and was rolled back"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
