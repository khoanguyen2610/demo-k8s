name: Build and Deploy

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'k8s/**'
      - '.github/workflows/build-deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/backend
  FRONTEND_IMAGE: ${{ github.repository }}/frontend

jobs:
  build:
    name: Build Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for EKS
        run: |
          # Update kubeconfig for EKS cluster
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION || 'us-east-1' }}
          
          # Verify connection
          echo "Testing cluster connection..."
          kubectl cluster-info
          kubectl get nodes

      - name: Create namespaces
        run: |
          kubectl create namespace backend --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace frontend --dry-run=client -o yaml | kubectl apply -f -

      - name: Update image tags
        run: |
          IMAGE_TAG="${{ github.ref_name }}-${{ github.sha }}"
          
          # Update backend image
          sed -i "s|image: ghcr.io/.*/backend.*|image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${IMAGE_TAG}|g" k8s/personal/backend-deployment.yaml
          
          # Update frontend image  
          sed -i "s|image: ghcr.io/.*/frontend.*|image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${IMAGE_TAG}|g" k8s/personal/frontend-deployment.yaml

      - name: Deploy backend
        run: |
          kubectl apply -f k8s/personal/backend-deployment.yaml
          kubectl rollout status deployment/backend-api -n backend --timeout=5m

      - name: Deploy frontend
        run: |
          kubectl apply -f k8s/personal/frontend-deployment.yaml
          kubectl rollout status deployment/frontend-app -n frontend --timeout=5m

      - name: Verify deployments
        run: |
          echo "=== Backend Status ==="
          kubectl get pods -n backend
          kubectl get svc -n backend
          
          echo ""
          echo "=== Frontend Status ==="
          kubectl get pods -n frontend
          kubectl get svc -n frontend
          
          echo ""
          echo "✅ Deployment complete!"

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    environment:
      name: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Rollback deployments
        run: |
          echo "Rolling back backend..."
          kubectl rollout undo deployment/backend-api -n backend || echo "Backend rollback failed or not needed"
          
          echo "Rolling back frontend..."
          kubectl rollout undo deployment/frontend-app -n frontend || echo "Frontend rollback failed or not needed"
          
          echo "⚠️ Deployment rolled back due to failure"

